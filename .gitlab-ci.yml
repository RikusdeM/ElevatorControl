image: "hseeberger/scala-sbt:8u222_1.3.4_2.13.1"

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. docker:19.03.1 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03.1/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using the Kubernetes executor, the variable
  # should be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  SBT_VERSION: "0.13.9"
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy"
  DOCKER_HOST: "dockerSVC"

services:
  - name: docker:18.09.7-dind
    alias: dockerSVC
    command: ["--insecure-registry=https://gitlab.mn8.ee:4567"]

build:
  stage: build
  script:
    - wget https://download.docker.com/linux/debian/dists/stretch/pool/stable/amd64/docker-ce-cli_18.09.7~3-0~debian-stretch_amd64.deb
    - dpkg -i docker-ce-cli_18.09.7~3-0~debian-stretch_amd64.deb
    - docker info
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $GITLAB_CI_URL
    - if [ "$CI_COMMIT_BRANCH" != "master" ]; then VERSION=$VERSION"-SNAPSHOT"; else echo "Release"; fi
    - echo $VERSION
    - sbt clean compile
    - sbt docker:publishLocal
    - docker push $GITLAB_CI_URL/dev/ElevatorControl:$VERSION

deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  environment:
    name: development
  script:
    - kubectl config set-cluster k8s --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM"
    - kubectl config set-credentials gitlab-admin --token="$KUBE_TOKEN"
    - kubectl create namespace "ElevatorControl"
    - kubectl config set-context mn8 --cluster=k8s --user=gitlab-admin --namespace="ElevatorControl"
    - kubectl config use-context mn8
    - kubectl config view
    - kubectl apply --filename k8/ElevatorControl.yaml
